import pandas as pd
import json
import streamlit as st
import base64

def generate_python_code(mappings, fhir_standard):
    """
    Generate Python code for the mapping based on the finalized mappings.
    
    Args:
        mappings: Dict containing the finalized mappings
        fhir_standard: The FHIR standard being used
    
    Returns:
        str containing the Python code
    """
    code = f"""
# FHIR Mapping Script for {fhir_standard}
# Generated by Healthcare Data to FHIR HL7 Mapper

import pandas as pd
import json
from datetime import datetime

def transform_data_to_fhir(data_df):
    \"\"\"
    Transform source data to FHIR resources based on the defined mappings.
    
    Args:
        data_df: pandas DataFrame containing the source data
    
    Returns:
        dict containing FHIR resources
    \"\"\"
    fhir_bundle = {{
        "resourceType": "Bundle",
        "type": "collection",
        "entry": []
    }}
    
"""
    
    # Generate code for each resource type
    for resource_name, fields in mappings.items():
        code += f"    # Process {resource_name} resources\n"
        code += f"    for index, row in data_df.iterrows():\n"
        code += f"        resource = {{\n"
        code += f"            'resourceType': '{resource_name}',\n"
        
        # Add fields mapping
        for fhir_field, mapping_info in fields.items():
            if isinstance(mapping_info, dict) and 'column' in mapping_info:
                column = mapping_info['column']
                
                # Handle different field types appropriately
                if "Date" in fhir_field or "Time" in fhir_field:
                    code += f"            '{fhir_field}': format_date(row['{column}']),\n"
                elif fhir_field == "identifier":
                    code += f"            '{fhir_field}': [{{'system': 'https://example.org/identifiers', 'value': str(row['{column}'])}}],\n"
                elif fhir_field == "name":
                    code += f"            '{fhir_field}': [{{'text': str(row['{column}'])}}],\n"
                elif fhir_field == "telecom":
                    code += f"            '{fhir_field}': [get_telecom_contact(row['{column}'])],\n"
                elif fhir_field == "address":
                    code += f"            '{fhir_field}': [{{'text': str(row['{column}'])}}],\n"
                elif fhir_field == "gender":
                    code += f"            '{fhir_field}': map_gender(row['{column}']),\n"
                elif "Code" in fhir_field or fhir_field == "code":
                    code += f"            '{fhir_field}': {{'coding': [{{'code': str(row['{column}']), 'system': 'http://example.org/coding'}}]}},\n"
                else:
                    code += f"            '{fhir_field}': str(row['{column}']),\n"
        
        code += f"        }}\n"
        code += f"        \n"
        code += f"        # Add resource to bundle\n"
        code += f"        fhir_bundle['entry'].append({{'resource': resource}})\n"
        code += f"    \n"
    
    # Add helper functions
    code += """
    return fhir_bundle

def format_date(date_value):
    """
    code += """
    Format a date value to FHIR date format (YYYY-MM-DD).
    
    Args:
        date_value: The date value to format
    
    Returns:
        str containing the formatted date
    """
    code += """
    if pd.isna(date_value):
        return None
    
    try:
        if isinstance(date_value, str):
            # Try to parse the string as a date
            date_obj = pd.to_datetime(date_value)
            return date_obj.strftime('%Y-%m-%d')
        elif isinstance(date_value, (pd.Timestamp, datetime)):
            return date_value.strftime('%Y-%m-%d')
        else:
            return str(date_value)
    except:
        return str(date_value)

def map_gender(gender_value):
    """
    code += """
    Map gender values to FHIR-compliant values.
    
    Args:
        gender_value: The gender value to map
    
    Returns:
        str containing mapped gender value
    """
    code += """
    if pd.isna(gender_value):
        return 'unknown'
    
    gender_str = str(gender_value).lower().strip()
    
    if gender_str in ['m', 'male']:
        return 'male'
    elif gender_str in ['f', 'female']:
        return 'female'
    elif gender_str in ['o', 'other']:
        return 'other'
    else:
        return 'unknown'

def get_telecom_contact(contact_value):
    """
    code += """
    Format a contact value to FHIR telecom format.
    
    Args:
        contact_value: The contact value to format
    
    Returns:
        dict containing the formatted telecom contact
    """
    code += """
    if pd.isna(contact_value):
        return None
    
    contact_str = str(contact_value).strip()
    
    # Determine if it's an email or phone
    if '@' in contact_str:
        return {
            'system': 'email',
            'value': contact_str
        }
    elif any(c.isdigit() for c in contact_str):
        return {
            'system': 'phone',
            'value': contact_str
        }
    else:
        return {
            'system': 'other',
            'value': contact_str
        }

def save_fhir_bundle(fhir_bundle, output_file):
    """
    code += """
    Save FHIR bundle to a JSON file.
    
    Args:
        fhir_bundle: FHIR bundle to save
        output_file: Path to the output file
    """
    code += """
    with open(output_file, 'w') as f:
        json.dump(fhir_bundle, f, indent=2)

# Example usage
# if __name__ == "__main__":
#     df = pd.read_csv('your_data_file.csv')
#     fhir_bundle = transform_data_to_fhir(df)
#     save_fhir_bundle(fhir_bundle, 'fhir_output.json')
"""
    
    return code

def generate_json_mapping(mappings, fhir_standard):
    """
    Generate a JSON representation of the mappings.
    
    Args:
        mappings: Dict containing the finalized mappings
        fhir_standard: The FHIR standard being used
    
    Returns:
        str containing the JSON mapping
    """
    mapping_json = {
        "mappingInfo": {
            "fhirStandard": fhir_standard,
            "generatedAt": pd.Timestamp.now().isoformat()
        },
        "resourceMappings": {}
    }
    
    for resource_name, fields in mappings.items():
        resource_mapping = {}
        
        for fhir_field, mapping_info in fields.items():
            if isinstance(mapping_info, dict) and 'column' in mapping_info:
                resource_mapping[fhir_field] = {
                    "sourceColumn": mapping_info['column'],
                    "confidence": mapping_info.get('confidence', 1.0)
                }
        
        mapping_json["resourceMappings"][resource_name] = resource_mapping
    
    return json.dumps(mapping_json, indent=2)

def get_download_link(content, filename, display_text):
    """
    Generate a download link for the given content.
    
    Args:
        content: Content to be downloaded
        filename: Name of the file
        display_text: Text to display for the download link
    
    Returns:
        str containing the HTML download link
    """
    content_str = str(content)
    b64_content = base64.b64encode(content_str.encode()).decode()
    href = f'data:text/plain;base64,{b64_content}'
    return f'<a href="{href}" download="{filename}">{display_text}</a>'

def export_mapping_as_file(export_format, mappings, fhir_standard, df=None):
    """
    Export mapping in the specified format and provide a download link.
    
    Args:
        export_format: Format to export (python, json, or fml)
        mappings: Dict containing the finalized mappings
        fhir_standard: The FHIR standard being used
        df: Optional DataFrame for FML export (required for FML)
    
    Returns:
        tuple (content, filename) for the exported mapping
    """
    if export_format == "python":
        content = generate_python_code(mappings, fhir_standard)
        filename = "fhir_mapping.py"
    elif export_format == "json":
        content = generate_json_mapping(mappings, fhir_standard)
        filename = "fhir_mapping.json"
    elif export_format == "fml":
        if df is None:
            raise ValueError("DataFrame is required for FML export")
        
        # Import the FML generator here to avoid circular imports
        from utils.fhir_mapping_language import generate_fml_export
        
        fml_package = generate_fml_export(mappings, df, fhir_standard)
        content = json.dumps(fml_package, indent=2)
        filename = "fhir_mapping_language.json"
    else:
        content = "Unsupported export format"
        filename = "error.txt"
    
    return content, filename
