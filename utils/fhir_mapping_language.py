import re
import json
import pandas as pd

def generate_fml_structure_map(mappings, df, source_structure_name, fhir_standard):
    """
    Generate a FHIR Mapping Language (FML) Structure Map based on the mappings.
    
    Args:
        mappings: Dict containing the mappings from columns to FHIR fields
        df: The original dataframe (for data type inference)
        source_structure_name: Name to use for the source structure
        fhir_standard: The FHIR standard being used (US Core or CARIN BB)
        
    Returns:
        str containing the FHIR Mapping Language Structure Map
    """
    # Get a unique list of FHIR resources used in mappings
    resources = list(mappings.keys())
    
    # Create the StructureMap header
    map_id = f"{source_structure_name.lower()}-to-fhir"
    
    # Starting timestamp for the StructureMap
    fml = f"""map "{map_id}" = "{source_structure_name}ToFHIR"

// Generated by Parker FHIR Mapper - {fhir_standard} Implementation Guide
// Source: {source_structure_name}
// Target: FHIR {fhir_standard}

uses "http://hl7.org/fhir/StructureDefinition/SourceStructure" alias {source_structure_name} as source
"""

    # Add each used FHIR resource as a dependency
    for resource in resources:
        resource_url = f"http://hl7.org/fhir/StructureDefinition/{resource}"
        fml += f'uses "{resource_url}" alias {resource} as target\n'
    
    fml += """
group MapData(source src : {0}, target bundle : Bundle) {{
    src -> bundle.type = 'collection';
    src -> bundle.entry as entry, entry.resource = create() as tgt then MapEntry(src, tgt);
}}
""".format(source_structure_name)

    # Create a group for each resource mapping
    for resource_name, fields in mappings.items():
        fml += f"""
group MapEntry(source src, target tgt : {resource_name}) {{
    src -> tgt.resourceType = '{resource_name}';
"""
        # Add each field mapping
        for fhir_field, mapping_info in fields.items():
            if isinstance(mapping_info, dict) and 'column' in mapping_info:
                column = mapping_info['column']
                
                # Check data types to determine the appropriate mapping rule
                if fhir_field in ["birthDate", "effectiveDateTime", "performedDateTime"] and (
                    pd.api.types.is_datetime64_any_dtype(df[column]) or
                    (isinstance(df[column], pd.Series) and 
                     df[column].astype(str).str.match(r'^\d{4}[-/]\d{1,2}[-/]\d{1,2}$').any())
                ):
                    fml += f"    src.{column} as dt -> tgt.{fhir_field} = translate(dt, 'http://hl7.org/fhir/ConceptMap/cm-date-format', 'FHIR-date');\n"
                
                elif fhir_field == "identifier":
                    fml += f"""    src.{column} as id -> tgt.{fhir_field} as identifier then {{
        id -> identifier.system = 'https://example.org/identifiers';
        id -> identifier.value = toString(id);
    }};\n"""
                
                elif fhir_field == "name":
                    fml += f"""    src.{column} as name -> tgt.{fhir_field} as humanName then {{
        name -> humanName.text = toString(name);
    }};\n"""
                
                elif fhir_field == "telecom":
                    fml += f"""    src.{column} as contact -> tgt.{fhir_field} as telecom then {{
        contact -> telecom.value = toString(contact);
        contact where (toString(contact).contains('@')) -> telecom.system = 'email';
        contact where (matches(toString(contact), '[0-9]')) -> telecom.system = 'phone';
        contact where (not(toString(contact).contains('@')) and not(matches(toString(contact), '[0-9]'))) -> telecom.system = 'other';
    }};\n"""
                
                elif fhir_field == "address":
                    fml += f"""    src.{column} as addr -> tgt.{fhir_field} as address then {{
        addr -> address.text = toString(addr);
    }};\n"""
                
                elif fhir_field == "gender":
                    fml += f"""    src.{column} as gender -> tgt.{fhir_field} = translate(gender, 'http://hl7.org/fhir/ConceptMap/cm-administrative-gender', 'Administrative Gender');\n"""
                
                elif "Code" in fhir_field or fhir_field == "code":
                    fml += f"""    src.{column} as cd -> tgt.{fhir_field} as coding then {{
        cd -> coding.coding as codeable then {{
            cd -> codeable.code = toString(cd);
            cd -> codeable.system = 'http://example.org/coding';
        }};
    }};\n"""
                
                else:
                    fml += f"    src.{column} -> tgt.{fhir_field} = toString(src.{column});\n"

        fml += "}\n"

    return fml


def generate_cql_accessors(mappings, source_structure_name, fhir_standard):
    """
    Generate Clinical Quality Language (CQL) accessors based on the mappings.
    
    Args:
        mappings: Dict containing the mappings from columns to FHIR fields
        source_structure_name: Name to use for the source structure
        fhir_standard: The FHIR standard being used (US Core or CARIN BB)
        
    Returns:
        str containing the CQL accessors
    """
    cql = f"""library {source_structure_name}ToFHIR version '1.0.0'

// Generated by Parker FHIR Mapper - {fhir_standard} Implementation Guide
// Source: {source_structure_name}

using FHIR version '4.0.1'

// Define context for the library
context Patient

"""

    # Generate define statements for each resource type
    for resource_name, fields in mappings.items():
        cql += f"""// {resource_name} resource accessors
define function Get{resource_name}s():
  ["{resource_name}"]

"""
        # Add each field accessor
        for fhir_field, mapping_info in fields.items():
            if isinstance(mapping_info, dict) and 'column' in mapping_info:
                column = mapping_info['column']
                
                # Function name with proper casing
                func_name = f"Get{resource_name}{fhir_field[0].upper()}{fhir_field[1:]}"
                
                cql += f"""define function {func_name}(resource {resource_name}):
  resource.{fhir_field}

"""

    return cql


def generate_liquid_templates(mappings, fhir_standard):
    """
    Generate Liquid templates for the mappings.
    
    Args:
        mappings: Dict containing the mappings from columns to FHIR fields
        fhir_standard: The FHIR standard being used (US Core or CARIN BB)
        
    Returns:
        dict of resource names to Liquid template strings
    """
    templates = {}
    
    for resource_name, fields in mappings.items():
        # Create a Liquid template for each resource type
        template = f"""{{
  "resourceType": "{resource_name}",
"""
        
        # Add each field with appropriate Liquid syntax
        for fhir_field, mapping_info in fields.items():
            if isinstance(mapping_info, dict) and 'column' in mapping_info:
                column = mapping_info['column']
                column_var = column.replace(' ', '_').lower()
                
                # Handle different field types appropriately with Liquid
                if fhir_field in ["birthDate", "effectiveDateTime", "performedDateTime"]:
                    template += f'  "{fhir_field}": "{{{{{column_var} | date: "%Y-%m-%d"}}}}",\n'
                
                elif fhir_field == "identifier":
                    template += f"""  "identifier": [
    {{
      "system": "https://example.org/identifiers",
      "value": "{{{{{column_var}}}}}"
    }}
  ],\n"""
                
                elif fhir_field == "name":
                    template += f"""  "name": [
    {{
      "text": "{{{{{column_var}}}}}"
    }}
  ],\n"""
                
                elif fhir_field == "telecom":
                    template += f"""  "telecom": [
    {{
      "system": "{{% if {column_var} contains '@' %}}email{{% elsif {column_var} contains '0' or {column_var} contains '1' or {column_var} contains '2' or {column_var} contains '3' or {column_var} contains '4' or {column_var} contains '5' or {column_var} contains '6' or {column_var} contains '7' or {column_var} contains '8' or {column_var} contains '9' %}}phone{{% else %}}other{{% endif %}}",
      "value": "{{{{{column_var}}}}}"
    }}
  ],\n"""
                
                elif fhir_field == "address":
                    template += f"""  "address": [
    {{
      "text": "{{{{{column_var}}}}}"
    }}
  ],\n"""
                
                elif fhir_field == "gender":
                    template += f"""  "gender": "{{% assign gender = {column_var} | downcase %}}{{% if gender == 'm' or gender == 'male' %}}male{{% elsif gender == 'f' or gender == 'female' %}}female{{% elsif gender == 'o' or gender == 'other' %}}other{{% else %}}unknown{{% endif %}}",\n"""
                
                elif "Code" in fhir_field or fhir_field == "code":
                    template += f"""  "{fhir_field}": {{
    "coding": [
      {{
        "system": "http://example.org/coding",
        "code": "{{{{{column_var}}}}}"
      }}
    ]
  }},\n"""
                
                else:
                    template += f'  "{fhir_field}": "{{{{{column_var}}}}}",\n'
        
        # Remove trailing comma and close the JSON
        template = template.rstrip(',\n') + "\n}"
        templates[resource_name] = template
    
    return templates


def generate_fml_export(mappings, df, fhir_standard):
    """
    Generate a complete FHIR Mapping Language export package.
    
    Args:
        mappings: Dict containing the mappings from columns to FHIR fields
        df: The original dataframe
        fhir_standard: The FHIR standard being used (US Core or CARIN BB)
    
    Returns:
        dict containing different FML representations
    """
    source_structure_name = "SourceData"
    
    # Generate different representations
    structure_map = generate_fml_structure_map(mappings, df, source_structure_name, fhir_standard)
    cql_accessors = generate_cql_accessors(mappings, source_structure_name, fhir_standard)
    liquid_templates = generate_liquid_templates(mappings, fhir_standard)
    
    # Create a JSON package with all representations
    fml_package = {
        "metadata": {
            "mappingTitle": f"{source_structure_name} to FHIR {fhir_standard}",
            "fhirVersion": "4.0.1",
            "implementationGuide": fhir_standard,
            "generatedBy": "Parker FHIR Mapper"
        },
        "structureMap": structure_map,
        "cqlAccessors": cql_accessors,
        "liquidTemplates": liquid_templates
    }
    
    return fml_package